https://www.youtube.com/watch?v=EVrMbS14FdE&list=PLA0M1Bcd0w8xZA3Kl1fYmOH_MfLpiYMRs&index=2

pip install Django

django-admin startproject drfsite

python manage.py migrate

python manage.py startapp women

в файле settings.py в секции INSTALLED_APPS добавить 'women.apps.WomenConfig'

в файле models.py добавить классы Women, Category

сделать миграции
    python manage.py makemigrations
    python manage.py migrate

создать пользователя
    python manage.py createsuperuser
    root/root

зарегистрировать приложение Women, Category в админке в файле admin.py
    admin.site.register(Women)
    admin.site.register(category)

Установить DRF
    pip install djangorestframework

в файле settings.py в секции INSTALLED_APPS добавить 'rest_framework'

создать представление в views.py
    class WomenAPIView(generics.ListAPIView):
    queryset = Women.object.all()
    serializer_class = WomenSerializer

создать сериалайзер Womenserializer в файле serialisers.py (создать)
    class WomenSerializer(serializers.ModelSerializer):
        class Meta:
            model = Women
            fields = ('title', 'cat_id')    # возвращаемые поля

прописать маршрут для представления в url.py
    from women.views import WomenAPIView
    path('api/v1/womenlist', WomenAPIView.as_view())


редактировать сериалайзер WomenSerializer
    class WomenSerializer(serializers.Serializer):
        title = serializers.CharField(max_length=255)
        content = serializers.CharField()
        time_create = serializers.DateTimeField()
        time_update = serializers.DateTimeField()
        is_published = serializers.BooleanField(default=True)
        cat_id = serializers.IntegerField()

редактировать WomenAPIView
    class WomenAPIView(APIView):
        def get(self, request):
            w = Women.objects.all()
            return Response({'posts:': WomenSerializer(w, many=True).data})

        def post(self, request):
            post_new = Women.objects.create(
                title=request.data['title'],
                content=request.data['content'],
                cat_id=request.data['cat_id']
            )

            return Response({'post': WomenSerializer(post_new).data})

для проверки принятых данных в функцию post добавить
        serializer = WomenSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)

#5
добавить метод create в WomenSerializer
        def create(self, validated_data):
            return Women.objects.create(**validated_data)

добавить метод update в WomenSerializer
    и метод put в WomenAPIView
        def put(self, request, *args, **kwargs):

#6
редактируем класс WomenSerializer, наследование от serializers.ModelSerializer
добавить класс Meta с атрибутами model и fields
добавлен новый класс class WomenAPIList(generics.ListCreateAPIView) наследуемый от generics.ListCreateAPIView

#7
Представления UpdateAPIView и RetrieveUpdateDestroyAPIView
создать класс WomenAPIUpdate(generics.UpdateAPIView)

создать WomenAPIDetailView(generics.RetrieveUpdateDestroyAPIView)
RetrieveUpdateDestroyAPIView позволяет получить, изменять, удалять 1 запись

в settings.py добавить настройки для фреймворка
    REST_FRAMEWORK = {
        'DEFAULT_RENDERER_CLASSES': [
            'rest_framework.renderers.JSONRenderer',
    #        'rest_framework.renderers.BrowsableAPIRenderer',
    ]

#8 Viewsets и ModelViewSet
Изменяем представления view
class WomenViewSet(viewsets.ModelViewSet):
    queryset = Women.objects.all()
    serializer_class = WomenSerializer

изменить маршруты
    с помощью SimpleRouter

#9. Роутеры: SimpleRouter и DefaultRouter
    создать декоратор @action для нового маршрута

    переопределить get_queryset в WomenViewSet

    сделать произвольный роутер

#10. Ограничения доступа (permissions)

Внести изменение в модель Women, добавить поле
    user = models.ForeignKey(User, verbose_name='Пользователь', on_delete=models.CASCADE)

    создать и применить миграцию
    python manage.py makemigrations
    python manage.py migrate

    Опять создать 3 представления
            class WomenAPIList(generics.ListCreateAPIView):
            queryset = Women.objects.all()
            serializer_class = WomenSerializer
            permission_classes = (IsAuthenticatedOrReadOnly,)


        class WomenAPIUpdate(generics.RetrieveUpdateAPIView):
            queryset = Women.objects.all()  # возвращает одно значение
            serializer_class = WomenSerializer


        class WomenAPIDestroy(generics.RetrieveUpdateDestroyAPIView):
            queryset = Women.objects.all()  # возвращает одно значение
            serializer_class = WomenSerializer

    в Womenserializer добавить
        user = serializers.HiddenField(default=serializers.CurrentUserDefault())

    можно создать свой класс ограничений
    создать файл permissions.py со своими классами доступа
        class IsAdminOrReadOnly(permissions.BasePermission):
        def has_permission(self, request, view):
            if request.method in permissions.SAFE_METHODS:  # если метод безопасный
                return True

            return bool(request.user and request.user.is_staff)  # доступ для администратора

    можно прописать глобальные права доступа по умолчанию в settings.py
    'DEFAULT_PERMISSION_CLASSES': [
        # 'rest_framework.permissions.IsAuthenticated',
        'rest_framework.permissions.AllowAny',
    ]


#11. Авторизация и аутентификация. Session-based authentication
    Для авторизации на основе сессии добавить в маршруты
    path('api/v1/drf-auth/', include('rest_framework.urls')),